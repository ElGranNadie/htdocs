//const apiUrl = 'http://192.168.1.10/v1/chat/completions'; // Proxy inverso configurado en el servidor local
//const apiUrl = 'http://nicole.servehttp.com/v1/chat/completions'; // Otra opci√≥n de proxy que estuvimos probando
//const apiUrl = 'http://nicoleia.servehttp.com:90/v1/chat/completions'; // URL activa de la API (proxy inverso) puerto 90
const apiUrl = "https://nicoleia.servehttp.com/api/chat";
// Clave de autorizaci√≥n para acceder a la API, tipo "Bearer"
const apiKey = 'lm-studio';
// Referencias a elementos del DOM (interfaz)
const chatMessages = document.getElementById('chat-messages'); // Contenedor donde aparecen los mensajes del chat
const userMessageInput = document.getElementById('user-message'); // Campo de entrada de texto del usuario
const sendButton = document.getElementById('send-button'); // Bot√≥n para enviar mensaje
const microphoneButton = document.getElementById('microphone-button'); // Bot√≥n para grabar por voz
// --PROBANDO---
// Variables para almacenar el resumen de la conversaci√≥n y el estado del chat
let resumen = "Conversaci√≥n vac√≠a hasta ahora.";

// -------------------- FUNCI√ìN: Agrega un mensaje al chat --------------------

function appendMessage(content, className) {
    const messageElement = document.createElement('div'); // Crea un nuevo <div> para el mensaje
    messageElement.textContent = content; // Establece el texto del mensaje
    messageElement.className = `message ${className}`; // Aplica clases CSS para estilo
    chatMessages.appendChild(messageElement); // Inserta el nuevo mensaje en el contenedor
    chatMessages.scrollTop = chatMessages.scrollHeight; // Auto scroll hacia el final del chat
}
// -------------------- FUNCI√ìN: Agrega una imagen al chat (aun no sirve bien :v)--------------------

function appendMessageImg(content, className, image) {
    const messageElementImg = document.createElement('div'); // Crea un nuevo <div> para el mensaje
    const img = document.createElement('img');
    img.src = `../../../imagenes/imgrecetas/${image}rec.jpg`;
    img.alt = 'Imagen de comida'; // Texto alternativo para la imagen
    img.className = `col-11`; // Clase CSS para la imagen (puedes definir
    messageElementImg.appendChild(img); // Establece el texto del mensaje
    messageElementImg.className = `message ${className}`; // Aplica clases CSS para estilo (por ejemplo: "message user")
    chatMessages.appendChild(messageElementImg); // Inserta el nuevo mensaje en el contenedor
    chatMessages.scrollTop = chatMessages.scrollHeight; // Auto scroll hacia el final del chat
}
// -------------------- FUNCI√ìN: Enviar mensaje --------------------

async function sendMessage() {
    const userMessage = userMessageInput.value.trim(); // Obtiene el mensaje y elimina espacios al inicio/fin
    if (!userMessage) {
        alert("Por favor, escribe un mensaje."); // Valida que haya texto
        return;
    }
    //$_SESSION['usuario_nombre']
    const nombre_usuario = document.createElement('div');
    let nombre = document.getElementById('nav-unused').dataset.nombre;
    console.log(nombre);
    nombre_usuario.textContent = nombre
    nombre_usuario.className = 'message nombre_usuario align-self-end';
    chatMessages.appendChild(nombre_usuario);
    appendMessage(userMessage, 'user align-self-end'); // Muestra el mensaje del usuario en el chat, la idea es que se muestre con un estilo diferente
    userMessageInput.value = ''; // Limpia el campo de entrada

    // Mostrar indicador temporal mientras responde
    appendMessage("‚è≥ NICOLE est√° pensando...", "ant align-self-start");

    // OK AQUI HAY QUE ESTAR ALERTAS, porque si no se pone el modelo correcto, la API no funciona
    // Aqu√≠ se arma el objeto que se enviar√° a la API
    // Contiene el modelo, mensajes y par√°metros de la solicitud
    // Es complicado, pero es as√≠ como funciona la API de OpenAI y similares
    // Estudienselo lo mas posible, porque es la base de todo lo que vamos a hacer
    const payload = { // Un payload ss el conjunto de datos transmitidos √∫tiles, por eso ese nombre
        //model: "openai/gpt-oss-20b", // Modelo a utilizar en el backend
        model: "meta-llama-3.1-8b-instruct", // Modelo a utilizar en el backend
        // --PROBANDO---
        mensaje: [
            {
                "role": "system",
                "content": `Resumen de la conversaci√≥n hasta ahora: ${resumen}, ahora, Responde en un tono neutro y
                 en espa√±ol, tu nombre es NICOLE, una gata cocinera cuya IA esta dise√±ada en gran parte por ALPHA
                 22 una compa√±ida de programacion. toma en cuenta las necesidades de nuestro usuario para realizar
                 recomendaciones viables para su alimentacion, no puedes desviarte a temas que no esten
                 relacionados con comida. Intenta, si te es solicitado, escoger entre una lista de resetas
                 predeterminada, en caso de tener que dise√±ar una propia, indica que no puedes procurar la seguridad
                 del usuario`
            },
            { 
                "role": "user", 
                "content": userMessage 
            }
        ],
        temperature: 0.3, // Controla la creatividad de la respuesta (0: determinista, 1: m√°s aleatorio)
        max_tokens: 300 // L√≠mite m√°ximo de tokens (palabras aproximadamente) en la respuesta
    };

    // Aqu√≠ se env√≠a la solicitud a la API que tenemos configurada de antes
    // Se puede liar si no se pone bien la URL o la clave de API
    try {
        // Env√≠o de la solicitud a la API usando POST
        const response = await fetch(apiUrl, { // una funcion as√≠ncrona que espera la respuesta de la API
            method: 'POST', // M√©todo HTTP POST para enviar datos
            headers: { 
                "Content-Type": "application/json", // Indica que el cuerpo es JSON
                "Authorization": `Bearer ${apiKey}` // Token de autenticaci√≥n, esto es la validacion para acceder a la API
            },
            // IMPORTANTE: usamos el formato que s√≠ funciona con tu servidor
            body: JSON.stringify({ mensaje: userMessage, resumen: resumen })
        });

        if (!response.ok) {
            const errorText = await response.text(); // Lee el texto del error
            console.error(`Error ${response.status}: ${errorText}`); 
            throw new Error(`HTTP ${response.status}: ${errorText}`); 
        }

        // Parsear la respuesta del servidor
        const data = await response.json();
        console.log("üì¶ Respuesta del servidor:", data); // Para debug

        // ‚úÖ Ajustado: tu backend devuelve { respuesta: "...", alimento: "...", resumen: "..." }
        const generatedText = data.respuesta || "‚ùå Sin respuesta del servidor.";
        const imagenselected = data.alimento || null;
        const nuevoResumen = data.resumen || resumen;

        // Limpia el mensaje "pensando..."
        chatMessages.removeChild(chatMessages.lastChild);

        // Muestra la respuesta en el chat
        const division = document.createElement('div');
        const imagen = "../imagenes/logo4-48.png"; // Img en variable para enviar lo que desees
        division.className = `icono-mensaje`; // Aplica clases CSS para estilo
        division.insertAdjacentHTML("beforeend", `<img src=${imagen} alt=${imagen}>`);
        chatMessages.appendChild(division);
        appendMessage(generatedText, 'ant align-self-start'); 

        // Si hay imagen asociada, mostrarla
        if (imagenselected && imagenselected !== 'null') {
            appendMessageImg(generatedText, 'imagenchat align-self-start', imagenselected);
        }

        // Actualiza el resumen de la conversaci√≥n si el backend lo env√≠a
        resumen = nuevoResumen;

    } catch (error) {
        console.error('Error enviando mensaje:', error); // Muestra error en consola
        appendMessage(`‚ö†Ô∏è No se pudo conectar con el servidor.`, 'ant align-self-start'); // Mensaje de error visible
    }
}

// -------------------- EVENTOS --------------------

// Clic en bot√≥n "Enviar"
sendButton.addEventListener('click', sendMessage);

// Presionar Enter (sin Shift) tambi√©n env√≠a el mensaje
userMessageInput.addEventListener('keypress', (event) => {
    if (event.key === 'Enter' && !event.shiftKey) {
        event.preventDefault(); // Evita salto de l√≠nea
        sendMessage(); // Env√≠a el mensaje
    }
});

// -------------------- RECONOCIMIENTO DE VOZ ESTA MADRE NO FUNCIONA ... AUN --------------------

// Verifica si el navegador soporta la API de reconocimiento de voz de Chrome
if ('webkitSpeechRecognition' in window) {
    const recognition = new webkitSpeechRecognition(); // Crea instancia del reconocimiento
    recognition.lang = 'es-ES'; // Idioma espa√±ol
    recognition.continuous = false; // Solo una frase por vez
    recognition.interimResults = false; // No mostrar resultados parciales

    // Evento: Resultado del reconocimiento
    recognition.onresult = (event) => {
        const transcript = event.results[0][0].transcript; // Texto reconocido por voz

        // Elimina el punto final si lo tiene
        const cleanedTranscript = transcript.endsWith('.') ? transcript.slice(0, -1) : transcript;

        // Agrega el texto reconocido al input del usuario, concatenando si ya hab√≠a algo
        const currentText = userMessageInput.value.trim();
        userMessageInput.value = currentText ? `${currentText} ${cleanedTranscript}` : cleanedTranscript;
    };

    // Evento: Error en reconocimiento
    recognition.onerror = (event) => {
        console.error('Error en reconocimiento de voz:', event.error);
        appendMessage('Error en reconocimiento de voz. Intenta de nuevo.', 'ant align-self-start');
    };

    // Grabaci√≥n por rat√≥n: iniciar al presionar
    microphoneButton.addEventListener('mousedown', () => {
        recognition.start(); // Comienza a escuchar
    });

    // Detener grabaci√≥n al soltar el bot√≥n
    microphoneButton.addEventListener('mouseup', () => {
        recognition.stop(); // Deja de escuchar
    });

    // Compatibilidad con pantallas t√°ctiles: inicio
    microphoneButton.addEventListener('touchstart', (event) => {
        event.preventDefault(); // Evita el men√∫ contextual
        recognition.start();
    });

    // Finalizaci√≥n en dispositivos m√≥viles
    microphoneButton.addEventListener('touchend', () => {
        recognition.stop();
    });
} else {
    // Si no hay soporte, muestra mensaje e inactiva el bot√≥n
    appendMessage('Tu navegador no soporta reconocimiento de voz.', 'ant align-self-start');
    microphoneButton.disabled = true;
}
