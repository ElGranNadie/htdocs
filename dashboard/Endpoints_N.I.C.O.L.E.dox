<?php
/**
 * @file endpoints_doc.php
 * @page endpoints Endpoints N.I.C.O.L.E — Documento visual y técnico
 * @brief Guía completa y visual de los endpoints principales (auth, CRUD, recetas, ingredientes, usuarios, webhook, IA).
 *
 * Este documento describe los endpoints REST disponibles en N.I.C.O.L.E.
 * Actualmente cuenta con **14 endpoints activos** organizados por módulos.
 * -------------------------------------------------------------------------------------------
 * @section auth Autenticación (auth.php)
 *


 * <div style="padding:8px; border-radius:6px; background:#e0f7ff; color:#003366;">
 * <b>Registrar Usuario</b>
 * </div>

  * **Registrar**
 * - **Qué hace:** Crea un nuevo usuario en el sistema.  
 * - **Para qué sirve:** Permitir acceso a nuevos clientes o cuentas.  
 * - **Cómo funciona:** Recibe datos → valida duplicados → inserta en BD → retorna ID.
 *
 * **Endpoint:** <code>/usuarios.php?action=register</code> (POST)<br>
 * **Respuesta (201):**
 * @code{.json}
 * { "status": "success", "id": 1 }
 * @endcode
 * **Listar**
 * - **Qué hace:** Devuelve todos los usuarios registrados.  
 * - **Para qué sirve:**  Exponer información de usuarios para consumo interno del sistema, facilitando autenticación, personalización y control de permisos. 
 * - **Cómo funciona:** SELECT en tabla `usuarios`.
 *
 * **Endpoint:** <code>/usuarios.php?action=list</code> (GET)<br>
 * **Respuesta (200):**
 * @code{.json}
 * [ { "id": 1, "nombre": "Juan" } ]
 * @endcode
 *



 * <div style="padding:8px; border-radius:6px; background:#e6fffa; color:#065f46;">
 * <b>Login</b>
 * </div>
 * - **Qué hace:** Autentica a un usuario contra el sistema.  
 * - **Para qué sirve:** Permite validar credenciales y obtener un token de sesión que será usado en llamadas posteriores.  
 * - **Cómo funciona:** El backend recibe usuario + contraseña, consulta la base de datos, y si coinciden devuelve un token (JWT o PHP session ID).
 *
 * **Endpoint:** <code>/auth.php?action=login</code><br>
 * **Método:** POST<br>
 * **Ejemplo respuesta (200):**
 * @code{.json}
 * { "status": "success", "token": "eyJ...jwt..." }
 * @endcode
 *
 * ---
 *
 * <div style="padding:8px; border-radius:6px; background:#fff7ed; color:#92400e;">
 * <b>Logout</b>
 * </div>
 * - **Qué hace:** Cierra la sesión activa eliminando el token.  
 * - **Para qué sirve:** Garantiza que el usuario ya no pueda usar su sesión y deba volver a loguearse.  
 * - **Cómo funciona:** El backend destruye la sesión o invalida el token, luego redirige al login.
 *
 * **Endpoint:** <code>/auth.php?action=logout</code><br>
 * **Método:** GET<br>
 * **Respuesta (200):**
 * @code{.json}
 * { "status": "success", "message": "Sesión cerrada" }
 * @endcode
 *
 * -------------------------------------------------------------------------------------------
 * @section crud CRUD Genérico (helpers_crud.php)
 *
 * <div style="background:#eef2ff; padding:8px; border-radius:6px; color:#3730a3;">
 * <b>Crear (create)</b>
 * </div>
 * - **Qué hace:** Inserta un nuevo registro en la tabla indicada.  
 * - **Para qué sirve:** Agregar nuevos elementos dinámicamente (ingredientes, recetas, usuarios, etc.).  
 * - **Cómo funciona:** Recibe el nombre de la tabla y un JSON con los campos → construye un INSERT → retorna el ID generado.
 *
 * **Endpoint:** <code>/helpers_crud.php?action=create</code> (POST)<br>
 * **Respuesta (201):**
 * @code{.json}
 * { "status": "success", "id": 12 }
 * @endcode
 *
 * ---
 *
 * <div style="background:#f0fdf4; padding:8px; border-radius:6px; color:#065f46;">
 * <b>Leer (read)</b>
 * </div>
 * - **Qué hace:** Consulta registros de la tabla especificada.  
 * - **Para qué sirve:** Obtener información filtrada o listados completos.  
 * - **Cómo funciona:** Recibe parámetros de tabla y filtros → construye un SELECT → devuelve array JSON de resultados.
 *
 * **Endpoint:** <code>/helpers_crud.php?action=read</code> (GET)<br>
 * **Respuesta (200):**
 * @code{.json}
 * [ { "id": 1, "campo": "valor" } ]
 * @endcode
 *
 * ---
 *
 * <div style="background:#fff7ed; padding:8px; border-radius:6px; color:#92400e;">
 * <b>Actualizar (update)</b>
 * </div>
 * - **Qué hace:** Modifica un registro existente según su ID.  
 * - **Para qué sirve:** Editar información ya almacenada.  
 * - **Cómo funciona:** Recibe el ID + JSON de campos a cambiar → ejecuta UPDATE en BD → confirma éxito.
 *
 * **Endpoint:** <code>/helpers_crud.php?action=update</code> (POST)<br>
 * **Respuesta (200):**
 * @code{.json}
 * { "status": "success" }
 * @endcode
 *
 * ---
 *
 * <div style="background:#fff1f2; padding:8px; border-radius:6px; color:#9f1239;">
 * <b>Eliminar (delete)</b>
 * </div>
 * - **Qué hace:** Borra un registro de la tabla especificada.  
 * - **Para qué sirve:** Eliminar datos innecesarios o caducados.  
 * - **Cómo funciona:** Recibe el ID → ejecuta DELETE → confirma éxito.
 *
 * **Endpoint:** <code>/helpers_crud.php?action=delete</code> (POST)<br>
 * **Respuesta (200):**
 * @code{.json}
 * { "status": "success" }
 * @endcode
 *
 * -------------------------------------------------------------------------------------------
 * @section ingredientes Ingredientes (ingredientes.php)
 *
 * **Listar**
 * - **Qué hace:** Devuelve todos los ingredientes registrados.  
 * - **Para qué sirve:** Mostrar inventario disponible al usuario o IA.  
 * - **Cómo funciona:** Ejecuta un SELECT en la tabla `ingredientes`.
 *
 * **Endpoint:** <code>/ingredientes.php?action=list</code> (GET)<br>
 * **Respuesta (200):**
 * @code{.json}
 * [ { "id": 1, "nombre": "Arroz" } ]
 * @endcode
 *
 * ---
 *
 * **Agregar**
 * - **Qué hace:** Inserta un nuevo ingrediente.  
 * - **Para qué sirve:** Mantener actualizado el inventario.  
 * - **Cómo funciona:** Recibe nombre y cantidad → INSERT en tabla → retorna ID.
 *
 * **Endpoint:** <code>/ingredientes.php?action=add</code> (POST)<br>
 * **Respuesta (201):**
 * @code{.json}
 * { "status": "success", "id": 1 }
 * @endcode
 *
 * -------------------------------------------------------------------------------------------
 * @section recetas Recetas (recetas.php)
 *
 * **Listar**
 * - **Qué hace:** Devuelve todas las recetas creadas.  
 * - **Para qué sirve:** Permite a usuarios y la IA sugerir preparaciones.  
 * - **Cómo funciona:** SELECT en tabla `recetas` y devuelve JSON.
 *
 * **Endpoint:** <code>/recetas.php?action=list</code> (GET)<br>
 * **Respuesta (200):**
 * @code{.json}
 * [ { "id": 1, "nombre": "Sopa" } ]
 * @endcode
 *
 * ---
 *
 * **Agregar**
 * - **Qué hace:** Registra una nueva receta con sus ingredientes.  
 * - **Para qué sirve:** Ampliar el catálogo de recetas disponibles.  
 * - **Cómo funciona:** Recibe nombre + array de ingredientes → INSERT en `recetas` y `recetas_ingredientes`.
 *
 * **Endpoint:** <code>/recetas.php?action=add</code> (POST)<br>
 * **Respuesta (201):**
 * @code{.json}
 * { "status": "success", "id": 1 }
 * @endcode
 *
 * -------------------------------------------------------------------------------------------

 * ---
 *
 *
 * -------------------------------------------------------------------------------------------
 * @section webhook Webhook (dashboard/webhook.php)
 *
 * - **Qué hace:** Procesa notificaciones enviadas automáticamente por MercadoPago.  
 * - **Para qué sirve:** Mantener sincronizado el estado de los pagos (aprobado, rechazado, pendiente).  
 * - **Cómo funciona:** El servicio de pagos llama este endpoint → el backend valida datos y actualiza tablas de pagos/usuarios.
 *
 * **Endpoint:** <code>/dashboard/webhook.php</code> (POST)<br>
 * **Respuesta (200):**
 * @code{.json}
 * { "status": "success", "message": "Pago procesado" }
 * @endcode
 *
 * -------------------------------------------------------------------------------------------
 * @section ia IA / Completions (scripts.js)
 *
 * - **Qué hace:** Envía un prompt/conversación y recibe texto generado por la IA.  
 * - **Para qué sirve:** Responder dudas de usuario o proponer recetas automáticas.  
 * - **Cómo funciona:** Recibe `messages` + config → reenvía al servidor IA (LMStudio u OpenAI-like) → retorna respuesta textual.
 *
 * **Endpoint:** <code>https://nicoleia.servehttp.com:90/v1/chat/completions</code> (POST)<br>
 * **Respuesta (200):**
 * @code{.json}
 * {
 *   "choices": [
 *     { "message": { "content": "Aquí tienes una receta rápida..." } }
 *   ]
 * }
 * @endcode
 */
?>
